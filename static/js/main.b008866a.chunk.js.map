{"version":3,"sources":["component/Header.js","component/AboveGame.js","util/number.js","util/tile.js","constant.js","util/keyboard.js","hook/useMoveTile.js","component/Tile.js","component/Game.js","App.js","hook/useLocalStorage.js","index.js"],"names":["Header","score","bestScore","className","style","marginRight","AboveGame","href","getRandomInteger","from","to","Math","floor","random","getInitialTileList","tileList","tile1","makeTile","push","tile2","checkCollision","newTile","some","tile","x","y","currentId","id","value","isNew","undefined","isMerged","observerMap","addKeyObserver","key","callBack","hotkeys","ob","executeCallbacks","removeKeyObserver","filter","item","useMoveTile","setTileList","setScore","moveAndAdd","newTileList","isMoveY","isMinus","sorted","map","isDisabled","sort","a","b","res","initialPos","pos","i","length","nextPos","moveTile","reduce","acc","v","moveUp","moveDown","moveLeft","moveRight","useEffect","Tile","cn","Game","useState","times","index","index2","App","initialValue","setValue","valueStr","window","localStorage","getItem","Number","prev","next","String","setItem","useLocalStorageNumber","setBestScore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b008866a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header({ score, bestScore }) {\n  return (\n    <header className=\"heading\">\n      <h1 className=\"title\">2048</h1>\n      <div className=\"scores-container\">\n        <div className=\"score-container\" style={{ marginRight: 5 }}>\n          {score}\n        </div>\n        <div className=\"best-container\">{bestScore}</div>\n      </div>\n    </header>\n  );\n}\n","import React from \"react\";\n\nexport default function AboveGame() {\n  return (\n    <div className=\"above-game\">\n      <p className=\"game-intro\">\n        Join the numbers and get to the <strong>2048 tile!</strong>\n      </p>\n      <a href=\"/\" className=\"restart-button\">\n        New Game\n      </a>\n    </div>\n  );\n}\n","//Random하게 Integer 뽑아주는 함수\r\nexport function getRandomInteger(from, to) {\r\n  //from부터  to까지\r\n  //    return Math.floor(Math.random() * to + from);\r\n  return Math.floor(Math.random() * to + from);\r\n}\r\n","import { MAX_POS } from \"../constant\";\r\nimport { assert } from \"./assert\";\r\nimport { getRandomInteger } from \"./number\";\r\n\r\n//tile 관련 함수\r\nexport function getInitialTileList() {\r\n  const tileList = []; //random 하게 생성하기 위해서 선언해주기\r\n  const tile1 = makeTile(tileList);\r\n  tileList.push(tile1);\r\n  const tile2 = makeTile(tileList);\r\n  tileList.push(tile2);\r\n  return tileList;\r\n}\r\n\r\nfunction checkCollision(tileList, newTile) {\r\n  return tileList.some((tile) => tile.x === newTile.x && tile.y === newTile.y);\r\n}\r\nlet currentId = 0; // key 값관리\r\nexport function makeTile(tileList) {\r\n  //위치 검사하는게 필요할 것 같음. 타일있는지와, 충돌검사가 필요함\r\n  let newTile;\r\n  while (!newTile || (tileList && checkCollision(tileList, newTile))) {\r\n    //tilelist 있는 경우만\r\n    newTile = {\r\n      id: currentId++,\r\n      x: getRandomInteger(1, MAX_POS),\r\n      y: getRandomInteger(1, MAX_POS),\r\n      value: 2,\r\n      isNew: undefined,\r\n      isMerged: undefined,\r\n    };\r\n  }\r\n  return newTile;\r\n}\r\n\r\nexport function moveTile({ tileList, x, y }) {\r\n  // assert(x === 0 || y === 0, \"\"); //x와 y중에 하나는 무조건 0이어야 하다...\r\n  const isMoveY = y !== 0;\r\n  const isMinus = x + y < 0;\r\n  const sorted = tileList\r\n    .map((item) => ({ ...item, isMerged: false, isNew: false }))\r\n    .filter((item) => !item.isDisabled)\r\n    .sort((a, b) => {\r\n      const res = isMoveY ? a.x - b.x : a.y - b.y;\r\n      if (res) {\r\n        return res;\r\n      } else {\r\n        if (isMoveY) {\r\n          return isMinus ? a.y - b.y : b.y - a.y;\r\n        } else {\r\n          return isMinus ? a.x - b.x : b.x - a.x;\r\n        }\r\n      }\r\n    });\r\n  const initialPos = isMinus ? 1 : MAX_POS;\r\n  let pos = initialPos;\r\n  for (let i = 0; i < sorted.length; i++) {\r\n    if (isMoveY) {\r\n      sorted[i].y = pos;\r\n      pos = isMinus ? pos + 1 : pos - 1;\r\n      if (sorted[i].x !== sorted[i + 1]?.x) {\r\n        pos = initialPos;\r\n      }\r\n    } else {\r\n      sorted[i].x = pos;\r\n      pos = isMinus ? pos + 1 : pos - 1;\r\n      if (sorted[i].y !== sorted[i + 1]?.y) {\r\n        pos = initialPos;\r\n      }\r\n    }\r\n  }\r\n\r\n  let nextPos = 0;\r\n  const newTileList = [...sorted];\r\n  for (let i = 0; i < sorted.length; i++) {\r\n    if (sorted[i].isDisabled) {\r\n      continue;\r\n    }\r\n\r\n    if (\r\n      nextPos &&\r\n      (isMoveY\r\n        ? sorted[i].x === sorted[i - 1]?.x\r\n        : sorted[i].y === sorted[i - 1]?.y)\r\n    ) {\r\n      if (isMoveY) {\r\n        sorted[i].y = nextPos;\r\n      } else {\r\n        sorted[i].x = nextPos;\r\n      }\r\n      nextPos += isMinus ? 1 : -1;\r\n    } else {\r\n      nextPos = 0;\r\n    }\r\n\r\n    if (\r\n      (isMoveY\r\n        ? sorted[i].x === sorted[i + 1]?.x\r\n        : sorted[i].y === sorted[i + 1]?.y) &&\r\n      sorted[i].value === sorted[i + 1]?.value\r\n    ) {\r\n      const tile = makeTile();\r\n      tile.x = sorted[i].x;\r\n      tile.y = sorted[i].y;\r\n      tile.isMerged = true;\r\n      tile.value = sorted[i].value * 2;\r\n      newTileList.push(tile);\r\n      sorted[i].isDisabled = true;\r\n      sorted[i + 1].isDisabled = true;\r\n      if (isMoveY) {\r\n        nextPos = sorted[i + 1].y;\r\n        sorted[i + 1].y = sorted[i].y;\r\n      } else {\r\n        nextPos = sorted[i + 1].x;\r\n        sorted[i + 1].x = sorted[i].x;\r\n      }\r\n    }\r\n  }\r\n  return newTileList;\r\n}\r\n","//상수값을 관리하는 JS 파일\r\nexport const MAX_POS = 4;\r\n","//keyboard 조작 handler\r\n//hotkey.js 라이브러리 사용\r\n//hotkeys(key, () => {});\r\n\r\nimport hotkeys from \"hotkeys-js\";\r\n\r\nconst observerMap = {};\r\nexport function addKeyObserver(key, callBack) {\r\n  if (!observerMap[key]) {\r\n    observerMap[key] = [];\r\n    hotkeys(key, () => executeCallbacks(key));\r\n  }\r\n  observerMap[key].push(callBack);\r\n}\r\n\r\nexport function removeKeyObserver(key, callBack) {\r\n  observerMap[key] = observerMap[key].filter((item) => item !== callBack); //callback이 아닌것만 제거\r\n}\r\n\r\nfunction executeCallbacks(key) {\r\n  for (const ob of observerMap[key]) {\r\n    ob();\r\n  }\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { addKeyObserver, removeKeyObserver } from \"../util/keyboard\";\r\nimport { makeTile, moveTile } from \"../util/tile\";\r\n\r\nexport default function useMoveTile({ tileList, setTileList, setScore }) {\r\n  //움직였을 때, 항상 추가가 되니까 Add도 포함 움직인 방향을 좌표값으로 받음\r\n  function moveAndAdd({ x, y }) {\r\n    //ismerged라는 tile merge 된 value만 큼 score를 추가하는 logic\r\n\r\n    const newTileList = moveTile({ tileList, x, y }); //움직여서 새로 타일을 만들어서 주는 func\r\n    const score = newTileList.reduce(\r\n      (acc, item) => (item.isMerged ? acc + item.value : acc),\r\n      0\r\n    );\r\n    setScore((v) => v + score); //이전값 + score\r\n    const newTile = makeTile(newTileList);\r\n    newTile.isNew = true;\r\n    newTileList.push(newTile);\r\n    setTileList(newTileList);\r\n    return tileList;\r\n  }\r\n\r\n  function moveUp() {\r\n    moveAndAdd({ x: 0, y: -1 });\r\n  }\r\n  function moveDown() {\r\n    moveAndAdd({ x: 0, y: 1 });\r\n  }\r\n  function moveLeft() {\r\n    moveAndAdd({ x: -1, y: 0 });\r\n  }\r\n  function moveRight() {\r\n    moveAndAdd({ x: 1, y: 0 });\r\n  }\r\n\r\n  useEffect(() => {\r\n    addKeyObserver(\"up\", moveUp);\r\n    addKeyObserver(\"down\", moveDown);\r\n    addKeyObserver(\"left\", moveLeft);\r\n    addKeyObserver(\"right\", moveRight);\r\n    return () => {\r\n      removeKeyObserver(\"up\", moveUp);\r\n      removeKeyObserver(\"down\", moveDown);\r\n      removeKeyObserver(\"left\", moveLeft);\r\n      removeKeyObserver(\"right\", moveRight);\r\n    };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport cn from \"classnames\"; //삼항연산자 대신 사용\r\n\r\nexport default function Tile({ x, y, value, isMerged, isNew }) {\r\n  return (\r\n    <div\r\n      className={cn(`tile tile-${value} tile-position-${x}-${y}`, {\r\n        \"tile-merged\": isMerged,\r\n        \"tile-new\": isNew,\r\n      })}\r\n    >\r\n      <div className=\"tile-inner\">{value}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport times from \"lodash/times\"; //times.... 뒤에 붙여줘야함\nimport { MAX_POS } from \"../constant\";\nimport { getInitialTileList } from \"../util/tile\";\nimport useMoveTile from \"../hook/useMoveTile\";\nimport Tile from \"./Tile\";\n\nexport default function Game({ setScore }) {\n  //setScore 받아옴\n  //#1. state 선언\n  const [tileList, setTileList] = useState(getInitialTileList); //#2. title initialize\n\n  //up down left right 키에 대한 handler 등록\n  useMoveTile({ tileList, setTileList, setScore }); //hooks\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"grid-container\">\n        {times(MAX_POS, (index) => (\n          <div key={index} className=\"grid-row\">\n            {times(MAX_POS, (index2) => (\n              <div key={index2} className=\"grid-cell\"></div>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"tile-container\">\n        {tileList.map((item) => (\n          <Tile key={item.id} {...item} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Header from \"./component/Header\";\nimport AboveGame from \"./component/AboveGame\";\nimport Game from \"./component/Game\";\nimport useLocalStorageNumber from \"./hook/useLocalStorage\";\n\nexport default function App() {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useLocalStorageNumber(\"bestScore\", 0);\n\n  useEffect(() => {\n    if (score > bestScore) {\n      setBestScore(score);\n    }\n  });\n  return (\n    <div className=\"container\">\n      <Header score={score} bestScore={bestScore} />\n      <AboveGame />\n      <Game setScore={setScore} />\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useLocalStorageNumber(key, initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    const valueStr = window.localStorage.getItem(key); //문자열이 저장되므로\r\n    if (valueStr) {\r\n      setValue(Number(valueStr));\r\n    }\r\n  }, [key]); //key가 변경될 때만 하면 됨\r\n\r\n  useEffect(() => {\r\n    const prev = window.localStorage.getItem(key);\r\n    const next = String(value);\r\n    if (prev !== next) {\r\n      window.localStorage.setItem(key, next);\r\n    }\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}